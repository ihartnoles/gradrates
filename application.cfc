<cfcomponent>
<cfset This.name = "DEVGRADRATES">
<cfset This.loginStorage = "session" >
<cfset This.Sessionmanagement=true>
<cfset This.Sessiontimeout="#createtimespan(0,2,0,0)#">
<cfset This.applicationtimeout="#createtimespan(0,2,0,0)#">

<cfscript>
    this.mappings = {
                //"/SharedComponents" = "E:/sites/shared-libs/components",
                //"/WhoAmI"           = "E:/sites/shared-libs/WhoAmI"
                "/SharedComponents" = "C:\inetpub\wwwroot\components",
                "/WhoAmI"           = "C:\inetpub\wwwroot\WhoAmI"
    };

    variables.resetFrameworkKey = "Z0mb1c1d3";
    variables.requiresCAS = true ; //app requires CAS authentication?
    variables.securedPaths = [
                "/",
                "/gradrates"
    ];

    variables.CASArguments  = {
                                    cas_server = "https://sso.fau.edu",
                                    approot = IIF((CGI.HTTPS eq "off"), DE("http://"), DE("https://")) & CGI.HTTP_HOST,
                                    direct_forwarding = true
                            };

</cfscript>

<cffunction
        name="OnApplicationStart"
        access="public"
        returntype="boolean"
        output="false"
        hint="Fires when the application is first created.">
   
    <!--- 
    <cftry>
        <!--- Test whether the DB that this application uses is accessible 
                by selecting some data. --->
        <cfquery name="testDB" dataSource="cfdocexamples" maxrows="2">
            SELECT Emp_ID FROM employee
        </cfquery>
       
        <!--- If we get database error, report it to the user, log the error
            information, and do not start the application. --->
        <cfcatch type="database">
            <cfoutput>
                This application encountered an error.<br>
                Please contact support.
            </cfoutput>
            <cflog file="#This.Name#" type="error" 
                text="cfdocexamples DB not available. message: #cfcatch.message# 
                Detail: #cfcatch.detail# Native Error: #cfcatch.NativeErrorCode#">
            <cfreturn False>
        </cfcatch>
    </cftry> 
    --->
    <cflog file="#This.Name#" type="Information" text="Application Started">
    <!--- You do not have to lock code in the onApplicationStart method that sets Application scope variables. --->
    <cfscript>
        Application.displayname = 'Graduation Rates Alert System';
        Application.availableResources=0;
        Application.counter1=1;
        Application.sessions=0;
        Application.dsn = 'RW_Gras';
        Application.impersonate = false ;
        resetAppFramework();
    </cfscript>
    <!--- You do not need to return True if you don't set the cffunction returntype attribute. --->
    <cfreturn true />
 </cffunction>

<cffunction name="onApplicationEnd">
    <cfargument name="ApplicationScope" required=true/>
    <cflog file="#This.Name#" type="Information" 
        text="Application #ApplicationScope.applicationname# Ended">
</cffunction>


<cffunction name="onRequestStart"> 
     <cfargument name = "targetPage" type="String" required=true/>
    <!--- Authentication code, generated by the Dreamweaver Login Wizard,
        makes sure that a user is logged in, and if not displays a login page. 
    <cfinclude template="mm_wizard_application_include.cfm"> 
    --->
    
    <!--- If it's time for maintenance, tell users to come back later. 
    <cfscript>
        if ((Hour(now()) gt 1) and (Hour(now()) lt 3)) {
            WriteOutput("The system is undergoing periodic maintenance. 
                Please return after 3:00 AM Eastern time.");
            return false;
        } else {
            this.start=now();
        }
    </cfscript>
    --->
    <cfset handleRequestSecurity(arguments.targetpage) /> 

    <cfif NOT handleRequestSecurity(arguments.targetpage) >
          <cfset do403(arguments.targetPage)>
    </cfif>

</cffunction>


<!--- Display a different footer for logged in users than for guest users or
         users who have not logged in. --->

<cffunction name="onRequestEnd">
    <cfargument type="String" name = "targetTemplate" required=true/>
    <!--- 
    <cfset theAuthuser=getauthuser()>
    <cfif ((theAuthUser EQ "guest") OR (theAuthUser EQ ""))>
        <cfinclude template="noauthuserfooter.cfm">
    <cfelse>
        <cfinclude template="authuserfooter.cfm">
    </cfif>  
    --->
    <!--- LOGGING STARTS HERE insert into AccessLog --->
    <cfquery name="logRequest" datasource="#application.dsn#">
        INSERT INTO AccessLog
           (
           referrer
           ,user_agent
           ,remote_addr
           ,created_by
          )
     VALUES
           (
           <cfqueryparam value="#cgi.HTTP_REFERER#" CFSQLType="cf_sql_varchar">
           ,<cfqueryparam value="#cgi.HTTP_USER_AGENT#" CFSQLType="cf_sql_varchar">
           ,<cfqueryparam value="#cgi.REMOTE_ADDR#" CFSQLType="cf_sql_varchar">
           ,<cfqueryparam value="#session.casuser.getusername()#" CFSQLType="cf_sql_varchar" />
           )
    </cfquery>
    
</cffunction>

<cffunction name="OnSessionStart"
        access="public"
        returntype="void"
        output="false"
        hint="Fires when the session is first created.">

    <cfscript>
        Session.started = now();
        // Session.shoppingCart = StructNew();
        // Session.shoppingCart.items =0;

        //Initialize User as Guest
        Session.CASUser = CreateObject("Component", "SharedComponents.Authentication.User").init();

        //Initialize CAS
        Session.CAS = CreateObject("Component", "SharedComponents.Authentication.CAS").init(variables.CASArguments);
    </cfscript>


    <!---
    <cfquery name="qAccessLevel" datasource="#application.dsn#">
        select top 1 * from permissions
        where username = <cfqueryparam value="#session.cas.getusername()#" CFSQLType="cf_sql_varchar" />
    </cfquery>

    <cfdump var="#qAccessLevel#" label="qAccessLevel - application.cfc - line 161" abort="true" />
    <cfabort>
    --->

    <!---
    <cfif Application.impersonate >
        <!--- temporarily set the session.gras here; in prod we will matchp with an access control list--->
        <cfset session.gras.role = 8>
        <cfset session.gras.home_dept = "">
        <cfset session.gras.home_college = "">
    </cfif>    
    --->

    <cflock timeout="5" throwontimeout="No" type="EXCLUSIVE" scope="SESSION">
        <cfset Application.sessions = Application.sessions + 1>
    </cflock>

    <cflog file="#This.Name#" type="Information" text="Session:
        #Session.sessionid# started">
</cffunction>

<cffunction name="onSessionEnd">
    <cfargument name = "SessionScope" required=true/>
    <cflog file="#This.Name#" type="Information" text="Session:
            #arguments.SessionScope.sessionid# ended">
</cffunction>

<cffunction name="onError">
    <cfargument name="Exception" required=true/>
    <cfargument type="String" name = "EventName" required=true/>
    <!--- Log all errors. --->
    <cflog file="#This.Name#" type="error" text="Event Name: #Eventname#">
    <cflog file="#This.Name#" type="error" text="Message: #exception.message#">
    <!--- Some exceptions, including server-side validation errors, do not
             generate a rootcause structure. --->
    <cfif isdefined("exception.rootcause")>
        <cflog file="#This.Name#" type="error" 
            text="Root Cause Message: #exception.rootcause.message#">
    </cfif>    

        <cfset local.errorMessage = #exception# />

        <cftry>
                
            <cfset inet = CreateObject("java", "java.net.InetAddress")>
            <cfset inet = inet.getLocalHost()>
            <cfset private.subject = "OnError: #local.errorMessage#" />

            <cfsavecontent variable="variables.ExtraInfo">
                <cfdump var="#arguments.Exception#" label="error">
                <cfdump var="#inet.getHostName()#" label="HostName">
                <cfdump var="#form#" label="form">
                <cfdump var="#url#" label="url">
                <cfdump var="#cgi#" label="cgi">
                <cfif IsDefined("session")><cfdump var="#session#" label="session"></cfif>
            </cfsavecontent>

            <cfmail from="devgradrates@fau.edu" to="ihartstein@fau.edu" subject="#inet.getHostName()#: #private.subject#">
            <cfmailpart type="text/plain">
            An error occurred.
            </cfmailpart>
            <cfmailpart type="text/html">
            <cfoutput>
            <html>
            <head>
                <title>Error</title>
            </head>
            <body>#variables.ExtraInfo#</body>
            </html></cfoutput>
            </cfmailpart>
            </cfmail>
            <cfcatch type="any"></cfcatch>
        
        </cftry>


    <!--- Display an error message if there is a page context. 
    <cfif NOT (Arguments.EventName IS onSessionEnd) OR 
            (Arguments.EventName IS onApplicationEnd)>
        <cfoutput>
            <h2>An unexpected error occurred.</h2>
            <p>Please provide the following information to technical support:</p>
            <p>Error Event: #EventName#</p>
            <p>Error details:<br>
            <!---<cfdump var=#exception#></p>--->
        </cfoutput>
    </cfif>--->
 </cffunction>

 <cffunction    name="resetAppFramework" access="private" returntype="void" output="false">
    <cfscript>
        application.SSV = CreateObject("Component", "SharedComponents.SSV.SSV").Init();

        application.Authentication = StructNew();
        application.Authentication.Security = CreateObject("Component", "SharedComponents.Authentication.Security").Init(variables.securedPaths);
    </cfscript>

    <!--- <cfdump var="#application#" abort="false" label="application.cfc - resetAppFramework() - line 183" /> --->
</cffunction>


<cffunction name="handleRequestSecurity" access="private" returntype="boolean" output="false">

    <!--- Define arguments. --->
        <cfargument
            name="TargetPage"
            type="string"
            required="true"
            />

    <cfscript>
        if(application.Authentication.Security.requiresCAS(Arguments.targetpage)){
            lock scope="session" type="exclusive" timeout="30" throwOnTimeout="no"
            {//Make sure CAS is Initialized
                if(Not StructkeyExists(Session, 'CAS') or Not IsInstanceOf(Session.CAS, "SharedComponents.Authentication.CAS"))
                {//Forwhatever reason, Session.CAS is no longer there, perhaps expired or lost?
                    onSessionStart(); //restart session
                }

                Session.CAS.validate(Arguments.targetpage);

                Session.CASUser = CreateObject("Component", "SharedComponents.Authentication.User").Init(Session.Cas.getUsername());
            }
        }

        if(StructKeyExists(Session, "CAS") and Not StructKeyExists(Session, "User"))
        {//Session Expired
            Session.CASUser = CreateObject("Component", "SharedComponents.Authentication.User").Init(Session.Cas.getUsername());
        }

    //return true;      
    </cfscript>

   

    <!---
    <cfdump var="#qAccessLevel#" label="qAccessLevel - application.cfc - line 260" output="C:\inetpub\wwwroot\gradrates\access.html" format="html" />
    --->

    <!--- this runs when  Application.impersonate = false; This should be the case in PRODUCTION --->
    <cfif NOT Application.impersonate  >
        <cfquery name="qAccessLevel" datasource="#application.dsn#">
            SELECT TOP 1  Permissions.username, Permissions.permission, Permissions.college_id, Permissions.dept_id, Colleges.course_college, Departments.course_dept
            FROM            Colleges INNER JOIN
                                     Departments ON Colleges.id = Departments.college_id INNER JOIN
                                     Permissions ON Departments.college_id = Permissions.college_id
            where username = <cfqueryparam value="#session.casuser.getusername()#" CFSQLType="cf_sql_varchar" />
        </cfquery>

        <cfif qAccessLevel.recordcount >
            <cfset session.gras.role = #qAccessLevel.permission#>
            <cfset session.gras.home_dept = #qAccessLevel.course_dept#>
            <cfset session.gras.home_college = #qAccessLevel.course_college#>
        <cfelse>
            <cfreturn false />
        </cfif>
    <cfelse>
         <!--- this runs when  Application.impersonate = TRUE; This should be the case in DEVELOPMENT --->
         <cfset impersonate = doImpersonate('ihartstein')>

         <cfif impersonate.recordcount>
            <cfset session.gras.role = #impersonate.permission#>
            <cfset session.gras.home_dept = #impersonate.course_dept#>
            <cfset session.gras.home_college = #impersonate.course_college#>
         </cfif>

    </cfif>
        
    
    <cfreturn true />
</cffunction>

<cffunction name="doImpersonate" access="private" output="true" returntype="query" hint="I am used to impersonate a user">
        <cfargument name="username" type="string" required="true">

        <cfset local.qAccessLevel = "">

        <cfquery name="local.qAccessLevel" datasource="#application.dsn#">
            SELECT TOP 1  Permissions.username, Permissions.permission, Permissions.college_id, Permissions.dept_id, Colleges.course_college, Departments.course_dept
            FROM            Colleges INNER JOIN
                                     Departments ON Colleges.id = Departments.college_id INNER JOIN
                                     Permissions ON Departments.college_id = Permissions.college_id
            where username = <cfqueryparam value="#arguments.username#" CFSQLType="cf_sql_varchar" />
        </cfquery>

        <cfreturn local.qAccessLevel />
</cffunction>


<cffunction name="do403" access="private" output="true" returntype="boolean" hint="I display a 404 error">
    <cfargument name="targetPage" type="string" required="true">
    <cfset var private = {}>

       <!doctype html class="no-js">
        <html>
            <head>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
                <!-- Apple devices fullscreen -->
                <meta name="apple-mobile-web-app-capable" content="yes" />
                <!-- Apple devices fullscreen -->
                <meta names="apple-mobile-web-app-status-bar-style" content="black-translucent" />
                
                <title><cfoutput>#application.displayname#</cfoutput></title>

                <!-- Bootstrap -->
                <link rel="stylesheet" href="css/bootstrap.min.css">
                <!-- Bootstrap responsive -->
                <link rel="stylesheet" href="css/bootstrap-responsive.min.css">
                <!-- jQuery UI -->
                <link rel="stylesheet" href="css/plugins/jquery-ui/smoothness/jquery-ui.css">
                <link rel="stylesheet" href="css/plugins/jquery-ui/smoothness/jquery.ui.theme.css">
                <!-- PageGuide -->
                <link rel="stylesheet" href="css/plugins/pageguide/pageguide.css">
                <!-- Fullcalendar -->
                <link rel="stylesheet" href="css/plugins/fullcalendar/fullcalendar.css">
                <link rel="stylesheet" href="css/plugins/fullcalendar/fullcalendar.print.css" media="print">
                <!-- chosen -->
                <link rel="stylesheet" href="css/plugins/chosen/chosen.css">
                <!-- select2 -->
                <link rel="stylesheet" href="css/plugins/select2/select2.css">
                <!-- icheck -->
                <link rel="stylesheet" href="css/plugins/icheck/all.css">
                <!-- Theme CSS -->
                <link rel="stylesheet" href="css/style.css">
                <!-- Color CSS -->
                <link rel="stylesheet" href="css/themes.css">

                <!-- rating CSS -->
                <link rel="stylesheet" href="css/jquery.rating.css">

                
                <!-- jQuery -->
                <script src="js/jquery.min.js"></script>


                <!--[if lte IE 9]>
                    <script src="js/plugins/placeholder/jquery.placeholder.min.js"></script>
                    <script>
                        $(document).ready(function() {
                            $('input, textarea').placeholder();
                        });
                    </script>
                <![endif]-->
                

                <!-- Favicon -->
                <link rel="shortcut icon" href="img/favicon.ico" />
                <!-- Apple devices Homescreen icon -->
                <link rel="apple-touch-icon-precomposed" href="img/apple-touch-icon-precomposed.png" />

            </head>

            <body class='error' style="background-color: ##204e81;">
                <div class="wrapper">
                    <div class="code"><span>403</span><i class="icon-warning-sign"></i></div>
                    <div class="desc">Forbidden.</div>
                    <div class="desc">You do not have access to this resource.</div>
                    
                    
                </div>
                
            </body>

        </html>
        
    <cfreturn true>
</cffunction>



</cfcomponent>